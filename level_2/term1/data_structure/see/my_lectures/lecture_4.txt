*โโโโโโโ ุงููุญุงุถุฑุฉ ุงูุฑุงุจุนุฉ โโโโโโโ*

โข *ุงูู Linkedlist :* ูููู ุจูุงูุงุช ูุชุฎุฒูู ุณูุณูู ูู ุงูุนูุงุตุฑ ุงููุฑุชุจุทู ูุนุง ุนุจุฑ links .

โข ูุนุฑู head* ููุคุดุฑ ููุนูุตุฑ ุงูุงููุ ููู ุฎูุงูู ูุตู ููู ุนูุงุตุฑ ุงููุงุฆูุฉ .
โโโโโโโโโโโโโโโโโโโโโโ
 โข *ุงููุงุน ุงูู Linkedlist :*

1) *Singly Linkedlist :*
- ุชุญูู ูุคุดุฑ next ููู Node ุงูุชุงููู.
- ุงูู next ูููNode ุงูุงุฎูุฑุฉ NULL .

2) *Doubly Linkedlist :*
- ุชุญูู ูุคุดุฑุงู next ู prev
- ุงูู next ูุคุดุฑ ููู Node ุงูุชุงููู
- ุงูู prev ูุคุดุฑ ููู Node ุงูุณุงุจูุฉ
- ุงูู next ูููNode ุงูุงุฎูุฑุฉ NULL
- ุงูู prev ูููNode ุงูุงููู NULL
- ููุฒุชูุง ุงูุชููู ูู ูู ุงูุงุชุฌุงููู

3) Circular Linkedlist .
- ุชุญูู ูุคุดุฑ ูุงุญุฏ next
- ุงูู next ูููNode ุงูุงุฎูุฑุฉ ูุคุดุฑ ูููNode ุงูุงููู(head) ูููุฐุง .
โโโโโโโโโโโโโโโโโโโโโโ
โข *ูููุฒุงุช Linkedlist :*
1) ุญุฌููุง ูุชุบูุฑ Dynamic .
2) ุงุฏุฑุงุฌ ูุญุฐู ุงูุนูุงุตุฑ ุจููุงุกุฉ .
3) ุนูุงุตุฑูุง ุชูุฌุฏ ูู ุงูุงูู ูุชูุฑูุฉ ูู ุงูุฐุงูุฑุฉ (ูุฑููุฉ)
4)) ุชูููุฐ ููุงูู ุจูุงูุงุช ูุชููุนุฉ (Stack/Queue/etc) .

โข *ุณูุจูุงุช Linkedlist :*
1) ุงููุตูู ุงูุนุดูุงุฆู ููุนูุงุตุฑ ุบูุฑ ูููู .
2) ูุณุงุญุฉ ุฐุงูุฑุฉ ุงุถุงููุฉ ููุคุดุฑ ูุน ูู ุนูุตุฑ .
โโโโโโโโโโโโโโโโโโโโโโ
1๏ธโฃ *ุงุถุงูุฉ Node ูู ุงูู ุงูููุณุช :*
1) ุงุฐุง ูุงูุช ุงูููุณุช ูุงุฑุบู
if (head == NULL) {
   head = newnode ;
   newnode->next = NULL ; }

2) ุงุฐุง ูุงูุช ุงูููุณุช ุชุญูู ุนูุงุตุฑ
newnode->next = head;
head = newnode;

2๏ธโฃ *ุงุถุงูุฉ Node ูู ุงุฎุฑ ุงูููุณุช :*
1) ุงุฐุง ูุงูุช ุงูููุณุช ูุงุฑุบู
if (head == NULL) {
   head = newnode ;
   newnode->next = NULL ; }

2) ุงุฐุง ูุงูุช ุงูููุณุช ุชุญูู ุนูุงุตุฑ
nameStruct *temp = head ;
while (temp->next != NULL) {
   temp = temp->next ; }
temp->next = newnode ;

3๏ธโฃ *ุงุถุงูุฉ Node ูู ููุงู ูุนูู :*
โโโโโโโโโโโโโโโโโโโโโโ
1๏ธโฃ *ุทุจุงุนุฉ ูู ุงูู Nodes :*
1) ุงุฐุง ูุงูุช ุงูููุณุช ูุงุฑุบู
if (head == NULL) {
   cout << " Empty List " ; }

2) ุงุฐุง ูุงูุช ุงูููุณุช ุชุญูู ุนูุงุตุฑ
nameStruct *temp = head ;
while (temp != NULL) {
   cout << temp->data ;
   temp = temp->next ; }

2๏ธโฃ *ุงูุจุญุซ ุนู Node ูุนูู :*
1) ุงุฐุง ูุงูุช ุงูููุณุช ูุงุฑุบู
if (head == NULL) {
   cout << " Empty List " ; }

2) ุงุฐุง ูุงูุช ุงูููุณุช ุชุญูู ุนูุงุตุฑ
nameStruct *temp = head ;
while (temp != NULL) {
   if(5== temp->data) {
      cout << temp->data ;
      return ; }
   temp = temp->next ; }
โโโโโโโโโโโโโโโโโโโโโโ
1๏ธโฃ *ุญุฐู ุงูู Node ุงูุงููู :*
1) ุงุฐุง ูุงูุช ุงูููุณุช ูุงุฑุบู
if (head == NULL) {
   cout << " Invalid " ; }

2) ุงุฐุง ูุงูุช ุงูููุณุช ุชุญูู ุนูุงุตุฑ
node = head ;
head = head->next ;
delete node ;

2๏ธโฃ *ุญุฐู ุงูู Node ุงูุงุฎูุฑู :*
1) ุงุฐุง ูุงูุช ุงูููุณุช ูุงุฑุบู
if (head == NULL) {
   cout << " Invalid " ; }

2) ุงุฐุง ูุงูุช ุงูููุณุช ุชุญูู ุนูุงุตุฑ
nameStruct *temp = head ;
nameStruct *prev = NULL ;
while (temp->next != NULL) {
   prev = temp ;
   temp = temp->next ; }
prev->next = NULL ;
delete temp ;

3๏ธโฃ *ุญุฐู Node ูู ููุงู ูุนูู :*
4๏ธโฃ *ุญุฐู ูู Nodes :*

๐๏ธ *โโโโ ุนูููููุฑ ุฎููุงูููุฏ ุจููุงูุฒูููุฑ โโโโ*