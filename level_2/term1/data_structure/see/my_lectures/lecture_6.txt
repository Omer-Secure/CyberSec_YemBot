*โโโโโโ ุงููุญุงุถุฑุฉ ุงูุณุงุฏุณุฉ โโโโโโ*

โข *ุงูู Queue :* ูููู ุจูุงูุงุช ูุญูู ูุฌููุนุฉ ูู ุงูุนูุงุตุฑ .

โข ุงูู ุนูุตุฑ ุงุถูู ูููQueue ูู ุงูู ุนูุตุฑ ูุฎุฑุฌ ูููุง FIFOุ ูุซู ุงูุทุงุจูุฑ (ูู ุทุฑููู tail ู head) .

โข ุงูู tail : ูุคุดุฑ ูุดูุฑ ููุนูุตุฑ ุงูุงุฎูุฑ ูู ุงูููุณุชุ ูู ุฎูุงูู ูุชู ุงุถุงูุฉ ุงูุนูุงุตุฑุ ูุณูู ุงูุถุง (back/rear) .

โข ุงูู head : ูุคุดุฑ ูุดูุฑ ููุนูุตุฑ ุงูุงูู ูู ุงูููุณุชุ ูู ุฎูุงูู ูุชู ุญุฐู ุงูุนูุงุตุฑุ ูุณูู ุงูุถุง (front) .
โโโโโโโโโโโโโโโโโโโโโโ
โข *ุชุทุจููุงุช ุงูู Queue :*
1) ุชุณุชุฎุฏู ูู ุงูุธูุฉ ุงูููุจููุชุฑ .
2) ุชุณุชุฎุฏู ูุฏุนู ุงูุชุฎุฒูู ุงููุคูุช ููุทุจุงุนุฉ .
3) โฆ
โโโโโโโโโโโโโโโโโโโโโโ
1๏ธโฃ *isEmpty() :*
if (front == NULL)
   return true ;
else return false ; 
โโโโโโโโโโโโโโโโโโโโโโ
2๏ธโฃ *Enqueue(data) :*
queue *newnode = new queue() ;
newnode->data = data ;
newnode->next = NULL ;
1) ุงุฐุง ูุงูุช ุงูููุณุช ูุงุฑุบู
if (front == NULL)
   front = rear = newnode ; 

2) ุงุฐุง ูุงูุช ุงูููุณุช ุชุญูู ุนูุงุตุฑ
rear->next = newnode ;
rear = newnode ;
โโโโโโโโโโโโโโโโโโโโโโ
3๏ธโฃ *DeQueue() :*
ุญุฐู ุงูุนูุตุฑ ุงูุงูู ูู ุงูููุณุช ูู ุนูุฏ front .
1) ุงุฐุง ูุงูุช ุงูููุณุช ูุงุฑุบู
if (front == NULL)
   cout << " Queue Empty " ; 

2) ุงุฐุง ูุงูุช ุงูููุณุช ุชุญูู ุนูุตุฑ 1
if(front == rear) {
   delete front ;
   front = rear = NULL ; }

3) ุงุฐุง ูุงูุช ุงูููุณุช ุชุญูู ุนูุงุตุฑ
queue *node = front ;
front = front->next ;
delete node ;
rear->next = newnode ;
rear = newnode ;
โโโโโโโโโโโโโโโโโโโโโโ
4๏ธโฃ *Clear() :*
ุญุฐู ุฌููุน ุงูุนูุงุตุฑ ูู ุงูููุณุช ุจุฏุงูุฉ ูู ุงูุนูุตุฑ ุงูุงูู front .
while (! isEmpty()) {
   DeQueue() ; }
โโโโโโโโโโโโโโโโโโโโโโ
5๏ธโฃ *Display() :*
ุนุฑุถ ุฌููุน ุนูุงุตุฑ ุงูููุณุช ูู ุนูุฏ ุงูุนูุตุฑ ุงูุงูู head ุงูู ุงูุงุฎูุฑ tail .
queue *temp = front ;
while(temp != NULL) {
   cout << temp->data ;
   temp = temp->next ; }
โโโโโโโโโโโโโโโโโโโโโโ
6๏ธโฃ *getFront() :*
ููุนุฑูุฉ ุงูุนูุตุฑ ุงูุงูู ูู ุงูููุณุช .
return front->data; 
โโโโโโโโโโโโโโโโโโโโโโ
7๏ธโฃ *getRear() :*
ููุนุฑูุฉ ุงูุนูุตุฑ ุงูุงุฎูุฑ ูู ุงูููุณุช .
return rear->data;
โโโโโโโโโโโโโโโโโโโโโโ
8๏ธโฃ *int Count() :*
ูุญุณุงุจ ุนุฏุฏ ุนูุงุตุฑ ุงูู Queue
int counter = 0 ;
Queue *temp = front ;
while (temp != NULL) {
   counter++ ;
   temp = temp->next ; }
return counter ;
โโโโโโโโโโโโโโโโโโโโโโ
9๏ธโฃ *isFull() :*
queue *temp = new queue() ;
if (temp == NULL)
  cout << " Queue Full " ;

else cout<<" Queue Not Full ";
โโโโโโโโโโโโโโโโโโโโโโ
โข Search(data)
ุงูุจุญุซ ุนู ุนูุตุฑ ูุนูู ูู ุงูููุณุช ุจุฏุงูุฉ ูู ุงูุนูุตุฑ ุงูุงูู head .

๐๏ธ *โโโโ ุนูููููุฑ ุฎููุงูููุฏ ุจููุงูุฒูููุฑ โโโโ*