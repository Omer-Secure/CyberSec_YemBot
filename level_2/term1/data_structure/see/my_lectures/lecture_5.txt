*โโโโโโ ุงููุญุงุถุฑุฉ ุงูุฎุงูุณุฉ โโโโโโ*

โข *ุงููStack :* ูููู ุจูุงูุงุช ูุญูู ูุฌููุนุฉ ูู ุงูุนูุงุตุฑ ุงููุฑุชุจุฉ ุจุชุฑุชูุจ ุฎุทู .

โข ุงุฎุฑ ุนูุตุฑ ุงุถูู ูููStack ูู ุงูู ุนูุตุฑ ูุฎุฑุฌ ูููุง LIFO (ููุง ุทุฑู ูุงุญุฏ ููุท top) .

โข ุงูู top : ูู ูุคุดุฑ ูุดูุฑ ููุนูุตุฑ ุงูุงุฎูุฑ ูู ุงูููุณุช ููู ุฎูุงูู ูุตู ูุจููุฉ ุนูุงุตุฑ ุงููุงุฆูุฉ .

โข ุนูููุงุช ุงูุงุถุงูุฉ ูุงูุญุฐู ูุบูุฑูุง ุชุชู ูู ุงุฎุฑ ุงููุงุฆูุฉ ูู ุฎูุงู top
โโโโโโโโโโโโโโโโโโโโโโ
1๏ธโฃ *Push() : top ุงุฏุฑุงุฌ ุนูุตุฑ ูู*
1) ุงุฐุง ูุงูุช ุงูููุณุช ูุงุฑุบู
stack *newnode = new stack();
newnode->data = 5 ;
if (top == NULL) {
   top = newnode ;
   newnode->next = NULL ; }

2) ุงุฐุง ูุงูุช ุงูููุณุช ุชุญูู ุนูุงุตุฑ
newnode->next = top ;
top = newnode ;
โโโโโโโโโโโโโโโโโโโโโโ
2๏ธโฃ *Pop : top ุญุฐู ุงูุนูุตุฑ ุงูู*
1) ุงุฐุง ูุงูุช ุงูููุณุช ูุงุฑุบู
if (top == NULL) {
   cout << " Empty List " ; }

2) ุงุฐุง ูุงูุช ุงูููุณุช ุชุญูู ุนูุงุตุฑ
nameStruct *node = top ;
top = top->next ;
delete node ;
โโโโโโโโโโโโโโโโโโโโโโ
3๏ธโฃ *Display ุนุฑุถ ูู ุงูุนูุงุตุฑ :*
1) ุงุฐุง ูุงูุช ุงูููุณุช ูุงุฑุบู
if (top == NULL) {
   cout << " Empty List " ; }

2) ุงุฐุง ูุงูุช ุงูููุณุช ุชุญูู ุนูุงุตุฑ
nameStruct *temp = top ;
while (temp != NULL) {
   cout << temp->data ;
   temp = temp->next ; }
โโโโโโโโโโโโโโโโโโโโโโ
4๏ธโฃ *Top : top ุชุฑุฌุน ูููุฉ ุงูู :*
1) ุงุฐุง ูุงูุช ุงูููุณุช ูุงุฑุบู
if (top == NULL) {
   cout << " Empty List " ; }

2) ุงุฐุง ูุงูุช ุงูููุณุช ุชุญูู ุนูุงุตุฑ
return top->data ;
โโโโโโโโโโโโโโโโโโโโโโ
5๏ธโฃ *Clear : ุญุฐู ุฌููุน ุงูุนูุงุตุฑ*
ุนูู ููุจ ููุนูููุฉ Pop .
โโโโโโโโโโโโโโโโโโโโโโ
6๏ธโฃ *isEmpty() :*
if (top == NULL) return true ;
else return false ;
โโโโโโโโโโโโโโโโโโโโโโ
7๏ธโฃ *isFull() :*
stack *temp = new stack() ;
if (temp == NULL)
   cout << " Stack is Full " ;

else cout <<" Stack Not Full " ;

delete temp ;
โโโโโโโโโโโโโโโโโโโโโโ
8๏ธโฃ *Search(data) :*
stack *temp = top ;
while(temp != NULL) {
   if(data == temp->data) {
      cout << " Data is Found " ;
      return ; }
   temp = temp->next ; }
cout << " Data is Not Found " ; 

๐๏ธ *โโโโ ุนูููููุฑ ุฎููุงูููุฏ ุจููุงูุฒูููุฑ โโโโ*