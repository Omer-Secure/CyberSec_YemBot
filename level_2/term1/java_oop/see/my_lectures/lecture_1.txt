*โโโโโโโ ุงููุญุงุถุฑุฉ ุงูุฃููู โโโโโโโ*

โข *ุชุตูู ูุบุงุช ุงูุจุฑูุฌุฉ ุนุงุฏุฉ ูู ุฃุฑุจุนุฉ ูุฆุงุช ุฑุฆูุณูุฉ :*
1) *ุงูุจุฑูุฌุฉ ุงูุฅุฑุดุงุฏูุฉ Structured - Procedural :*
ุชููุฑ ูุฌููุนุฉ ูู ุงูุจูุงูุงุชุ ูุงูุฅุฌุฑุงุกุงุช ุงูุชู ุชุคุซุฑ ุนูู ุงูุจูุงูุงุช (ุงููุชุบูุฑุงุช). ุฃูุซูุฉ ุนูู ุงููุบุงุช ุงูุฅุฑุดุงุฏูุฉ
(FORTRAN - BASIC - COBOL - Pascal) .

2) *ุงูุจุฑูุฌุฉ ุงููุธูููุฉ Functional :*
ุงูุจุฑูุงูุฌ ูู ูุฌููุนุฉ ูู ุงูุฏูุงู ุงูุฑูุงุถูุฉุ ุฃูุซูุฉ ุนูู ุงููุบุงุช ุงููุธูููุฉ ูุซู (LISP ูScheme ูStandard ML) .

3) *ุงูุจุฑูุฌุฉ ุงูููุทููุฉ Logic :*
ุงูุจุฑูุงูุฌ ุนุจุงุฑุฉ ุนู ูุฌููุนุฉ ุฌูู ููุทููุฉุ ุชุนุจุฑ ุนู ุญูุงุฆู ูููุงุนุฏ ุญูู ูุฌุงู ูุดููุฉ ูุงุ ุฃูุซูุฉ ุนูู ุงููุบุงุช ุงูููุทููุฉ ูุซู (Prolog) .

4) *ุงูุจุฑูุฌุฉ ุงูููุฌูุฉ ูููุงุฆูุงุช OOP :*
ุทุฑููุฉ ุจุฑูุฌูุฉ ุชุณุชุฎุฏู Objects ูุชุนูููุงุชูุง ูุชุตููู ุงูุจุฑุงูุฌ ูุงูุชุทุจููุงุช .
โโโโโโโโโโโโโโโโโโโโโโ
โข *ุงูู Object :* ูุงุฆู ุนุงุฏุฉู ูููู ูุณุฎุฉ ูู ุงูููุงุณ ูุญูู ุตูุงุชAttributes ุชุตู ุงููุงุฆู ููุธุงุฆูMethods .

โข *ููู Object ุฎุตุงุฆุต ูุญุฏุฏู ูุชุจุนูุง :*
1) Variable ุงููุชุบูุฑ = State - Field - Attribute .

2) Behavior ุงูุณููู = Methods - Function - Operation .

3) Identity : name, ID
โโโโโโโโโโโโโโโโโโโโโโ
โข *ุงูู Class :* ูุฎุทุท ูุญูู ูุฌููุนู ูู members ุงูุฎุงุตู ุจุงููObjectุ ููููู ุงูุดุงุก ุงูุนุฏูุฏ ูู ุงููุงุฆูุงุช ูู ุฎูุงู ุงุณู ุงูููุงุณ .

โข *ุงููุฑุงุซุฉ Inheritance :* ุงูุชุณุงุจ Object ูุงุญุฏ ูู ุฎุตุงุฆุต ููุธุงุฆู ุงููุงุฆู ุงูุงุตู (ุชููุฑ ุงุนุงุฏุฉ ุงุณุชุฎุฏุงู ุงูุชุนูููุงุช ุงูุจุฑูุฌูุฉ) .

โข *ุชุนุฏุฏ ุงูุงุดูุงู Polymorphism :* ุชูููุฐ ูููู ูุงุญุฏุฉ ุจุทุฑู ูุฎุชูููุ ูุชุญูููู ุนุจุฑ ุนูููุชู Overloading ู Overriding .

โข *ุงูุชุฌุฑูุฏ Abstraction :* ุงุฎูุงุก ุงูุชูุงุตูู ุงูุฏุงุฎููู ูุนุฑุถ ุงููุธุงุฆู ุงููุชุงุญุฉ (ูุซู ุงูููุงููุงุช ุงููุงุชููู) .

โข *ุงูุชุบููู Encapsulation :* ุชูููุฉ ุชุฌุนู ุงููุชุบูุฑุงุช ูู ุงูููุงุณ ุฎุงุตุฉPrivateุ ูุงูููู ุงููุตูู ููุง ูู ุฎุงุฑุฌ ุงูููุงุณ ุงูุง ุนุจุฑ ุฏูุงู ุนุงููPublic ุชุนุฑู ุจู()get ู ()set (ุงุฎูุงุก ุงูุจูุงูุงุช) .
โโโโโโโโโโโโโโโโโโโโโโ
โข *ูููุฒุงุช OOP :*
1) ุงูุชุฌุฒุฆุฉ Modularization .

2) ูุงุจููุฉ ุงูููู Understandability .

3) ุณูููุฉ ุงูุตูุงูู Maintainability .

4) ุงุฎูุงุก ุงูุจูุงูุงุช(ุงูุชุบููู) : ุชุบููุฑ ูู ุงุฌุฑุงุกุงุช ุงููุงุฆู ุจุฏูู ุงูุชุฃุซูุฑ ุนูู ุงููุงุฆูุงุช ุงูุงุฎุฑู ุงูุชู ุชุนุชูุฏ ุนููู .

5) ุงุนุงุฏุฉ ุงุณุชุฎุฏุงู ุงูููุฏ ูู ุฎูุงู ุงููุฑุงุซุฉ .

6) ุงูุชุณูุณู ุงููุฑูู Hierarchy .
โโโโโโโโโโโโโ
โข *ุณูุจูุงุช OOP :*
1) ุงูุญุฌู Size : ุจุฑุงูุฌูุง ุญุฌููุง ุงูุจุฑ ูู ุงูุจุฑุงูุฌ ุงูุนุงุฏูู .

2) ุงูุณุฑุนู Speed : ุชููู ุงุจุทุงุก ูู ุงูุจุฑุงูุฌ ุงูุนุงุฏูุฉ ุจุณุจุจ ุญุฌููุง ูุนูููุงุชูุง ุงููุซูุฑู .

3) ุงูุฌูุฏ Effort : ุจุนุถ ุชูููุงุชูุง ูุฏ ุชููู ุตุนุจุฉ ุงูููู .

4) ุบูุฑ ููุงุณุจุฉ ูุฌููุน ุงููุงุน ุงููุดุงูู .

๐๏ธ *โโโโ ุนูููููุฑ ุฎููุงูููุฏ ุจููุงูุฒูููุฑ โโโโ*